extern crate futures;
extern crate tokio_core;

use futures::future::{Future};
use futures::{Poll, Async};
use tokio_core::reactor::Core;

use std::sync::atomic::{AtomicBool, Ordering};

struct I32 {
    num: i32,
    complete: AtomicBool,
}

impl I32 {
    fn new(num: i32) -> Self {
        I32 {
            num: num,
            complete: AtomicBool::new(false),
        }
    }
}

impl Future for I32 {
    type Item = i32;
    type Error = ();

    fn poll(&mut self) -> Poll<i32, ()> {
        if self.complete.load(Ordering::Relaxed) == true {
            Ok(Async::Ready(self.num))
        } else {
            Ok(Async::NotReady)
        }
    }
}

fn main() {
    let num = I32::new(10);
    let mut reactor = Core::new().unwrap();
    let future = num.and_then(|n| {
        println!("{:?}", n);
        Ok(())
    });
    
    reactor.run(future).unwrap();
}
